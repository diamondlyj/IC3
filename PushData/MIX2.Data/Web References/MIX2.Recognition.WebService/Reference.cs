//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace MIX2.Data.MIX2.Recognition.WebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="RecognitionSoap", Namespace="http://mix.intuitivelabs.net/")]
    public partial class Recognition : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback RegisterSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExchangeTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExchangeKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSignatureTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback EmulateClientDecryptOperationCompleted;
        
        private System.Threading.SendOrPostCallback EmulateClientEncryptOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEmulationKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendObjectOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Recognition() {
            this.Url = global::MIX2.Data.Properties.Settings.Default.MIX_Data_MIX2_Recognition_WebService_Recognition;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event RegisterSourceCompletedEventHandler RegisterSourceCompleted;
        
        /// <remarks/>
        public event ExchangeTokenCompletedEventHandler ExchangeTokenCompleted;
        
        /// <remarks/>
        public event VerifyTokenCompletedEventHandler VerifyTokenCompleted;
        
        /// <remarks/>
        public event ExchangeKeyCompletedEventHandler ExchangeKeyCompleted;
        
        /// <remarks/>
        public event GetSignatureTemplateCompletedEventHandler GetSignatureTemplateCompleted;
        
        /// <remarks/>
        public event EmulateClientDecryptCompletedEventHandler EmulateClientDecryptCompleted;
        
        /// <remarks/>
        public event EmulateClientEncryptCompletedEventHandler EmulateClientEncryptCompleted;
        
        /// <remarks/>
        public event GetEmulationKeyCompletedEventHandler GetEmulationKeyCompleted;
        
        /// <remarks/>
        public event SendObjectCompletedEventHandler SendObjectCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mix.intuitivelabs.net/RegisterSource", RequestNamespace="http://mix.intuitivelabs.net/", ResponseNamespace="http://mix.intuitivelabs.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode RegisterSource(string Nickname, string Key) {
            object[] results = this.Invoke("RegisterSource", new object[] {
                        Nickname,
                        Key});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterSourceAsync(string Nickname, string Key) {
            this.RegisterSourceAsync(Nickname, Key, null);
        }
        
        /// <remarks/>
        public void RegisterSourceAsync(string Nickname, string Key, object userState) {
            if ((this.RegisterSourceOperationCompleted == null)) {
                this.RegisterSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterSourceOperationCompleted);
            }
            this.InvokeAsync("RegisterSource", new object[] {
                        Nickname,
                        Key}, this.RegisterSourceOperationCompleted, userState);
        }
        
        private void OnRegisterSourceOperationCompleted(object arg) {
            if ((this.RegisterSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterSourceCompleted(this, new RegisterSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mix.intuitivelabs.net/ExchangeToken", RequestNamespace="http://mix.intuitivelabs.net/", ResponseNamespace="http://mix.intuitivelabs.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExchangeToken(string OldToken, string SourceGUID) {
            object[] results = this.Invoke("ExchangeToken", new object[] {
                        OldToken,
                        SourceGUID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExchangeTokenAsync(string OldToken, string SourceGUID) {
            this.ExchangeTokenAsync(OldToken, SourceGUID, null);
        }
        
        /// <remarks/>
        public void ExchangeTokenAsync(string OldToken, string SourceGUID, object userState) {
            if ((this.ExchangeTokenOperationCompleted == null)) {
                this.ExchangeTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExchangeTokenOperationCompleted);
            }
            this.InvokeAsync("ExchangeToken", new object[] {
                        OldToken,
                        SourceGUID}, this.ExchangeTokenOperationCompleted, userState);
        }
        
        private void OnExchangeTokenOperationCompleted(object arg) {
            if ((this.ExchangeTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExchangeTokenCompleted(this, new ExchangeTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mix.intuitivelabs.net/VerifyToken", RequestNamespace="http://mix.intuitivelabs.net/", ResponseNamespace="http://mix.intuitivelabs.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string VerifyToken(string Token, string SourceGUID) {
            object[] results = this.Invoke("VerifyToken", new object[] {
                        Token,
                        SourceGUID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyTokenAsync(string Token, string SourceGUID) {
            this.VerifyTokenAsync(Token, SourceGUID, null);
        }
        
        /// <remarks/>
        public void VerifyTokenAsync(string Token, string SourceGUID, object userState) {
            if ((this.VerifyTokenOperationCompleted == null)) {
                this.VerifyTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyTokenOperationCompleted);
            }
            this.InvokeAsync("VerifyToken", new object[] {
                        Token,
                        SourceGUID}, this.VerifyTokenOperationCompleted, userState);
        }
        
        private void OnVerifyTokenOperationCompleted(object arg) {
            if ((this.VerifyTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyTokenCompleted(this, new VerifyTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mix.intuitivelabs.net/ExchangeKey", RequestNamespace="http://mix.intuitivelabs.net/", ResponseNamespace="http://mix.intuitivelabs.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ExchangeKey(string Key, string IV, string NewKey, string Token, string SourceGUID) {
            object[] results = this.Invoke("ExchangeKey", new object[] {
                        Key,
                        IV,
                        NewKey,
                        Token,
                        SourceGUID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ExchangeKeyAsync(string Key, string IV, string NewKey, string Token, string SourceGUID) {
            this.ExchangeKeyAsync(Key, IV, NewKey, Token, SourceGUID, null);
        }
        
        /// <remarks/>
        public void ExchangeKeyAsync(string Key, string IV, string NewKey, string Token, string SourceGUID, object userState) {
            if ((this.ExchangeKeyOperationCompleted == null)) {
                this.ExchangeKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExchangeKeyOperationCompleted);
            }
            this.InvokeAsync("ExchangeKey", new object[] {
                        Key,
                        IV,
                        NewKey,
                        Token,
                        SourceGUID}, this.ExchangeKeyOperationCompleted, userState);
        }
        
        private void OnExchangeKeyOperationCompleted(object arg) {
            if ((this.ExchangeKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExchangeKeyCompleted(this, new ExchangeKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mix.intuitivelabs.net/GetSignatureTemplate", RequestNamespace="http://mix.intuitivelabs.net/", ResponseNamespace="http://mix.intuitivelabs.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetSignatureTemplate(string ObjectClass) {
            object[] results = this.Invoke("GetSignatureTemplate", new object[] {
                        ObjectClass});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetSignatureTemplateAsync(string ObjectClass) {
            this.GetSignatureTemplateAsync(ObjectClass, null);
        }
        
        /// <remarks/>
        public void GetSignatureTemplateAsync(string ObjectClass, object userState) {
            if ((this.GetSignatureTemplateOperationCompleted == null)) {
                this.GetSignatureTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSignatureTemplateOperationCompleted);
            }
            this.InvokeAsync("GetSignatureTemplate", new object[] {
                        ObjectClass}, this.GetSignatureTemplateOperationCompleted, userState);
        }
        
        private void OnGetSignatureTemplateOperationCompleted(object arg) {
            if ((this.GetSignatureTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSignatureTemplateCompleted(this, new GetSignatureTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mix.intuitivelabs.net/EmulateClientDecrypt", RequestNamespace="http://mix.intuitivelabs.net/", ResponseNamespace="http://mix.intuitivelabs.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EmulateClientDecrypt(string Key, string IV, string Text) {
            object[] results = this.Invoke("EmulateClientDecrypt", new object[] {
                        Key,
                        IV,
                        Text});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EmulateClientDecryptAsync(string Key, string IV, string Text) {
            this.EmulateClientDecryptAsync(Key, IV, Text, null);
        }
        
        /// <remarks/>
        public void EmulateClientDecryptAsync(string Key, string IV, string Text, object userState) {
            if ((this.EmulateClientDecryptOperationCompleted == null)) {
                this.EmulateClientDecryptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEmulateClientDecryptOperationCompleted);
            }
            this.InvokeAsync("EmulateClientDecrypt", new object[] {
                        Key,
                        IV,
                        Text}, this.EmulateClientDecryptOperationCompleted, userState);
        }
        
        private void OnEmulateClientDecryptOperationCompleted(object arg) {
            if ((this.EmulateClientDecryptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EmulateClientDecryptCompleted(this, new EmulateClientDecryptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mix.intuitivelabs.net/EmulateClientEncrypt", RequestNamespace="http://mix.intuitivelabs.net/", ResponseNamespace="http://mix.intuitivelabs.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode EmulateClientEncrypt(string Text, string Key) {
            object[] results = this.Invoke("EmulateClientEncrypt", new object[] {
                        Text,
                        Key});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void EmulateClientEncryptAsync(string Text, string Key) {
            this.EmulateClientEncryptAsync(Text, Key, null);
        }
        
        /// <remarks/>
        public void EmulateClientEncryptAsync(string Text, string Key, object userState) {
            if ((this.EmulateClientEncryptOperationCompleted == null)) {
                this.EmulateClientEncryptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEmulateClientEncryptOperationCompleted);
            }
            this.InvokeAsync("EmulateClientEncrypt", new object[] {
                        Text,
                        Key}, this.EmulateClientEncryptOperationCompleted, userState);
        }
        
        private void OnEmulateClientEncryptOperationCompleted(object arg) {
            if ((this.EmulateClientEncryptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EmulateClientEncryptCompleted(this, new EmulateClientEncryptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mix.intuitivelabs.net/GetEmulationKey", RequestNamespace="http://mix.intuitivelabs.net/", ResponseNamespace="http://mix.intuitivelabs.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetEmulationKey() {
            object[] results = this.Invoke("GetEmulationKey", new object[0]);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetEmulationKeyAsync() {
            this.GetEmulationKeyAsync(null);
        }
        
        /// <remarks/>
        public void GetEmulationKeyAsync(object userState) {
            if ((this.GetEmulationKeyOperationCompleted == null)) {
                this.GetEmulationKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEmulationKeyOperationCompleted);
            }
            this.InvokeAsync("GetEmulationKey", new object[0], this.GetEmulationKeyOperationCompleted, userState);
        }
        
        private void OnGetEmulationKeyOperationCompleted(object arg) {
            if ((this.GetEmulationKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEmulationKeyCompleted(this, new GetEmulationKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mix.intuitivelabs.net/SendObject", RequestNamespace="http://mix.intuitivelabs.net/", ResponseNamespace="http://mix.intuitivelabs.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendObject(string Object, string Token, string SourceGUID) {
            object[] results = this.Invoke("SendObject", new object[] {
                        Object,
                        Token,
                        SourceGUID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendObjectAsync(string Object, string Token, string SourceGUID) {
            this.SendObjectAsync(Object, Token, SourceGUID, null);
        }
        
        /// <remarks/>
        public void SendObjectAsync(string Object, string Token, string SourceGUID, object userState) {
            if ((this.SendObjectOperationCompleted == null)) {
                this.SendObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendObjectOperationCompleted);
            }
            this.InvokeAsync("SendObject", new object[] {
                        Object,
                        Token,
                        SourceGUID}, this.SendObjectOperationCompleted, userState);
        }
        
        private void OnSendObjectOperationCompleted(object arg) {
            if ((this.SendObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendObjectCompleted(this, new SendObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RegisterSourceCompletedEventHandler(object sender, RegisterSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ExchangeTokenCompletedEventHandler(object sender, ExchangeTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExchangeTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExchangeTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void VerifyTokenCompletedEventHandler(object sender, VerifyTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ExchangeKeyCompletedEventHandler(object sender, ExchangeKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExchangeKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExchangeKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSignatureTemplateCompletedEventHandler(object sender, GetSignatureTemplateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSignatureTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSignatureTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void EmulateClientDecryptCompletedEventHandler(object sender, EmulateClientDecryptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmulateClientDecryptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EmulateClientDecryptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void EmulateClientEncryptCompletedEventHandler(object sender, EmulateClientEncryptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmulateClientEncryptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EmulateClientEncryptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetEmulationKeyCompletedEventHandler(object sender, GetEmulationKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEmulationKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEmulationKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SendObjectCompletedEventHandler(object sender, SendObjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591